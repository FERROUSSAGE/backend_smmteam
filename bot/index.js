const { Telegraf } = require('telegraf');
const { Message, Answer, Question } = require('../models');

const bot = new Telegraf(process.env.BOT_TOKEN);

let state = {};
let qa = {};

const qaHandler = (ctx) => {
    Object.values(qa)
        .forEach(item => {
            if(ctx.message.text.toLowerCase().match(item.title.toLowerCase()))
                ctx.reply(item.answer.text);
        })
};

const messageSendHandler = async (obj) => {
    const { chatId, text } = obj;

    try{
        return await bot.telegram.sendMessage(chatId, text);
    } catch(e){ return false; }
};

const messageAddHandler = async (ctx) => {
    const { message: { text, chat: { first_name: firstname, last_name: lastname, id: chatId } } } = ctx;
    
    try {
        await Message.create({text, nickName: `${firstname} ${lastname}`, chatId}); 
    } catch (e) { console.log(e); }

};

bot.start(async (ctx) => {
    bot.telegram.sendMessage(ctx.chat.id,
        '–ë–æ—Ç - SMMCraft, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Å–∞—é—â–∏–µ—Å—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∞–π—Ç–∞.'
        + '\n\n' +
        '–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º" –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: 'https://smmcraft.ru/' },
                    { text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', callback_data: 'openConnection' }
                ], 
                [
                    { text: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏', url: 'https://teleg.run/Kuzminaa' },
                    { text: '–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', callback_data: 'closeConnection' }
                ]
            ]
        }
    });

    qa = await Question.findAll({ include: [ Answer ] });
});

bot.on('text', async (ctx) => state.connection ? messageAddHandler(ctx) : qaHandler(ctx));

bot.on('callback_query', ctx => {

    switch(ctx.callbackQuery.data){
        case 'openConnection': 
            state.connection = true;
            ctx.reply('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        break;
        case 'closeConnection':
            state.connection = false;
            ctx.reply('üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ!');
        break;

    }
})

module.exports = {
    bot, 
    messageSendHandler
};